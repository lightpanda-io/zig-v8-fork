diff --git a/BUILD.gn b/BUILD.gn
index e7b5853..1aa161a 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -1342,7 +1342,7 @@ config("toolchain") {
     }
   }
 
-  if (is_win) {
+  if (is_win && !use_zig_tc) {
     cflags += [
       "/wd4245",  # Conversion with signed/unsigned mismatch.
       "/wd4267",  # Conversion with possible loss of data.
@@ -1364,7 +1364,7 @@ config("toolchain") {
     ]
   }
 
-  if (!is_clang && is_win) {
+  if (!is_clang && is_win && !use_zig_tc) {
     cflags += [
       "/wd4506",  # Benign "no definition for inline function"
 
diff --git a/src/ast/ast.cc b/src/ast/ast.cc
index 34a26d9..bc79e17 100644
--- a/src/ast/ast.cc
+++ b/src/ast/ast.cc
@@ -30,6 +30,10 @@
 #include "src/strings/string-stream.h"
 #include "src/zone/zone-list-inl.h"
 
+// Turn off mingw defines since we're using them as tokens in the file.
+#pragma push_macro("VOID")
+#undef VOID
+
 namespace v8 {
 namespace internal {
 
@@ -1140,5 +1144,7 @@ const char* CallRuntime::debug_name() {
 #endif  // DEBUG
 }
 
+#pragma pop_macro("VOID")
+
 }  // namespace internal
 }  // namespace v8
diff --git a/src/ast/prettyprinter.cc b/src/ast/prettyprinter.cc
index e0cb7da..043b92e 100644
--- a/src/ast/prettyprinter.cc
+++ b/src/ast/prettyprinter.cc
@@ -15,6 +15,10 @@
 #include "src/regexp/regexp-flags.h"
 #include "src/strings/string-builder-inl.h"
 
+// Turn off mingw defines since we're using them as tokens in the file.
+#pragma push_macro("VOID")
+#undef VOID
+
 namespace v8 {
 namespace internal {
 
@@ -1484,5 +1488,7 @@ void AstPrinter::VisitSuperCallReference(SuperCallReference* node) {
 
 #endif  // DEBUG
 
+#pragma pop_macro("VOID")
+
 }  // namespace internal
 }  // namespace v8
diff --git a/src/base/bits.h b/src/base/bits.h
index 2d61878..831b91c 100644
--- a/src/base/bits.h
+++ b/src/base/bits.h
@@ -243,7 +243,6 @@ inline uint32_t RoundDownToPowerOfTwo32(uint32_t value) {
   return result;
 }
 
-
 // Precondition: 0 <= shift < 32
 inline constexpr uint32_t RotateRight32(uint32_t value, uint32_t shift) {
   return (value >> shift) | (value << ((32 - shift) & 31));
diff --git a/src/base/platform/platform-win32.cc b/src/base/platform/platform-win32.cc
index 0eedaba..14638de 100644
--- a/src/base/platform/platform-win32.cc
+++ b/src/base/platform/platform-win32.cc
@@ -78,14 +78,14 @@ inline void MemoryFence() {
 
 #endif  // __MINGW64_VERSION_MAJOR
 
-
+// Already included by mingw
+/*
 int localtime_s(tm* out_tm, const time_t* time) {
   tm* posix_local_time_struct = localtime_r(time, out_tm);
   if (posix_local_time_struct == nullptr) return 1;
   return 0;
 }
 
-
 int fopen_s(FILE** pFile, const char* filename, const char* mode) {
   *pFile = fopen(filename, mode);
   return *pFile != nullptr ? 0 : 1;
@@ -128,6 +128,7 @@ int strncpy_s(char* dest, size_t dest_size, const char* source, size_t count) {
   *dest = 0;
   return 0;
 }
+*/
 
 #endif  // __MINGW32__
 
diff --git a/src/compiler/revectorizer.cc b/src/compiler/revectorizer.cc
index a680934..d433ec4 100644
--- a/src/compiler/revectorizer.cc
+++ b/src/compiler/revectorizer.cc
@@ -739,7 +739,7 @@ Node* Revectorizer::VectorizeTree(PackNode* pnode) {
                   edge.to()->op()->mnemonic());
 
             if (!input_128) {
-              TRACE("Create ExtractF128(%lu) node from #%d\n", i,
+              TRACE("Create ExtractF128(%zu) node from #%d\n", i,
                     new_node->id());
               input_128 = graph()->NewNode(
                   mcgraph()->machine()->ExtractF128(int32_t(i)), new_node);
diff --git a/src/interpreter/bytecode-generator.cc b/src/interpreter/bytecode-generator.cc
index 706d897..5b0aac0 100644
--- a/src/interpreter/bytecode-generator.cc
+++ b/src/interpreter/bytecode-generator.cc
@@ -36,6 +36,10 @@
 #include "src/parsing/token.h"
 #include "src/utils/ostreams.h"
 
+// Turn off mingw defines since we're using them as tokens in the file.
+#pragma push_macro("VOID")
+#undef VOID
+
 namespace v8 {
 namespace internal {
 namespace interpreter {
@@ -7411,3 +7415,5 @@ FeedbackSlot BytecodeGenerator::GetDummyCompareICSlot() {
 }  // namespace interpreter
 }  // namespace internal
 }  // namespace v8
+
+#pragma push_macro("VOID")
diff --git a/src/interpreter/bytecode-generator.h b/src/interpreter/bytecode-generator.h
index 63174d4..6188067 100644
--- a/src/interpreter/bytecode-generator.h
+++ b/src/interpreter/bytecode-generator.h
@@ -13,6 +13,10 @@
 #include "src/objects/feedback-vector.h"
 #include "src/objects/function-kind.h"
 
+// Turn off mingw defines since we're using them as tokens in the file.
+#pragma push_macro("VOID")
+#undef VOID
+
 namespace v8 {
 namespace internal {
 
@@ -562,4 +566,6 @@ class BytecodeGenerator final : public AstVisitor<BytecodeGenerator> {
 }  // namespace internal
 }  // namespace v8
 
+#pragma pop_macro("VOID")
+
 #endif  // V8_INTERPRETER_BYTECODE_GENERATOR_H_
diff --git a/src/parsing/keywords-gen.h b/src/parsing/keywords-gen.h
index 3a8101b..232a16c 100644
--- a/src/parsing/keywords-gen.h
+++ b/src/parsing/keywords-gen.h
@@ -10,6 +10,12 @@
 
 #include "src/parsing/token.h"
 
+// Turn off mingw defines since we're using them as tokens in the file.
+#pragma push_macro("CONST")
+#pragma push_macro("VOID")
+#undef CONST
+#undef VOID
+
 namespace v8 {
 namespace internal {
 
@@ -174,4 +180,7 @@ inline Token::Value PerfectKeywordHash::GetToken(const char* str, int len) {
 }  // namespace internal
 }  // namespace v8
 
+#pragma pop_macro("VOID")
+#pragma pop_macro("CONST")
+
 #endif  // V8_PARSING_KEYWORDS_GEN_H_
diff --git a/src/parsing/parser-base.h b/src/parsing/parser-base.h
index 740a02e..a3dbd19 100644
--- a/src/parsing/parser-base.h
+++ b/src/parsing/parser-base.h
@@ -31,6 +31,10 @@
 #include "src/regexp/regexp.h"
 #include "src/zone/zone-chunk-list.h"
 
+// Turn off mingw defines since we're using them as tokens in the file.
+#pragma push_macro("CONST")
+#undef CONST
+
 namespace v8 {
 namespace internal {
 
@@ -6548,4 +6552,6 @@ void ParserBase<Impl>::CheckClassFieldName(IdentifierT name, bool is_static) {
 }  // namespace internal
 }  // namespace v8
 
+#pragma pop_macro("CONST")
+
 #endif  // V8_PARSING_PARSER_BASE_H_
diff --git a/src/parsing/parser.cc b/src/parsing/parser.cc
index aba8ca6..47ca6f1 100644
--- a/src/parsing/parser.cc
+++ b/src/parsing/parser.cc
@@ -33,6 +33,10 @@
 #include "src/tracing/trace-event.h"
 #include "src/zone/zone-list-inl.h"
 
+// Turn off mingw defines since we're using them as tokens in the file.
+#pragma push_macro("CONST")
+#undef CONST
+
 namespace v8 {
 namespace internal {
 
@@ -3681,3 +3685,5 @@ Statement* Parser::CheckCallable(Variable* var, Expression* error, int pos) {
 
 }  // namespace internal
 }  // namespace v8
+
+#pragma pop_macro("CONST")
diff --git a/src/parsing/token.h b/src/parsing/token.h
index dabbff0..db8f327 100644
--- a/src/parsing/token.h
+++ b/src/parsing/token.h
@@ -10,6 +10,12 @@
 #include "src/base/logging.h"
 #include "src/common/globals.h"
 
+// Turn off mingw defines since we're using them as tokens in the file.
+#pragma push_macro("CONST")
+#pragma push_macro("VOID")
+#undef CONST
+#undef VOID
+
 namespace v8 {
 namespace internal {
 
@@ -349,4 +355,7 @@ class V8_EXPORT_PRIVATE Token {
 }  // namespace internal
 }  // namespace v8
 
+#pragma pop_macro("VOID")
+#pragma pop_macro("CONST")
+
 #endif  // V8_PARSING_TOKEN_H_
diff --git a/src/profiler/heap-snapshot-generator.cc b/src/profiler/heap-snapshot-generator.cc
index 763a540..6637f15 100644
--- a/src/profiler/heap-snapshot-generator.cc
+++ b/src/profiler/heap-snapshot-generator.cc
@@ -400,7 +400,8 @@ HeapSnapshot::HeapSnapshot(HeapProfiler* profiler,
   static_assert(kSystemPointerSize != 4 || sizeof(HeapGraphEdge) == 12);
   static_assert(kSystemPointerSize != 8 || sizeof(HeapGraphEdge) == 24);
   static_assert(kSystemPointerSize != 4 || sizeof(HeapEntry) == 32);
-#if V8_CC_MSVC
+// Since clang MINGW will use -mms-bitfields by default, it should have the same struct layout as MSVC.
+#if V8_CC_MSVC || V8_CC_MINGW
   static_assert(kSystemPointerSize != 8 || sizeof(HeapEntry) == 48);
 #else   // !V8_CC_MSVC
   static_assert(kSystemPointerSize != 8 || sizeof(HeapEntry) == 40);
